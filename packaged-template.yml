AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  WebInstanceType:
    Default: t3.micro
    Description: Instance type
    Type: String
  DBInstanceType:
    Default: t3.micro
    Description: Instance type
    Type: String
Resources:
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: opsworks.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: opsworks-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:*
            - iam:PassRole
            - cloudwatch:GetMetricStatistics
            - cloudwatch:DescribeAlarms
            - elasticloadbalancing:*
            Resource: '*'
  OpsWorksEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
  InstanceRole:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: OpsWorksEC2Role
  thoughtworksDemoStack:
    Type: AWS::OpsWorks::Stack
    Properties:
      Name:
        Ref: AWS::StackName
      ConfigurationManager:
        Name: Chef
        Version: 12
      ServiceRoleArn:
        Fn::GetAtt:
        - ServiceRole
        - Arn
      DefaultInstanceProfileArn:
        Fn::GetAtt:
        - InstanceRole
        - Arn
      UseCustomCookbooks: 'true'
      DefaultOs: Amazon Linux 2
      DefaultRootDeviceType: ebs
      CustomCookbooksSource:
        Type: git
        Url: git://github.com/jyogaraj/thoughtworksdemo.git
  databaseSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow DB connection
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 0.0.0.0/0
  webserverSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  databaseLayer:
    Type: AWS::OpsWorks::Layer
    Properties:
      StackId:
        Ref: thoughtworksDemoStack
      Type: custom
      Shortname: db
      EnableAutoHealing: 'true'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps: 'true'
      LoadBasedAutoScaling:
        DownScaling:
          CpuThreshold: 30
          InstanceCount: 1
          ThresholdsWaitTime: 10
          IgnoreMetricsTime: 10
        Enable: true
        UpScaling:
          CpuThreshold: 70
          InstanceCount: 1
          ThresholdsWaitTime: 10
          IgnoreMetricsTime: 10
      Name: database
      CustomRecipes:
        Setup:
        - thoughtworksdemo::database
        Shutdown:
        - thoughtworksdemo::databasestop
      CustomSecurityGroupIds:
      - Fn::GetAtt:
        - databaseSG
        - GroupId
  dbInstance:
    Type: AWS::OpsWorks::Instance
    Properties:
      StackId:
        Ref: thoughtworksDemoStack
      LayerIds:
      - Ref: databaseLayer
      InstanceType:
        Ref: DBInstanceType
      AvailabilityZone: us-east-1a
      InstallUpdatesOnBoot: true
      SshKeyName: yogaraj-aws
  webLayer:
    Type: AWS::OpsWorks::Layer
    Properties:
      StackId:
        Ref: thoughtworksDemoStack
      Type: custom
      Name: website
      Shortname: web
      EnableAutoHealing: 'true'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps: 'true'
      LoadBasedAutoScaling:
        DownScaling:
          CpuThreshold: 30
          InstanceCount: 1
          ThresholdsWaitTime: 10
          IgnoreMetricsTime: 10
        Enable: true
        UpScaling:
          CpuThreshold: 70
          InstanceCount: 1
          ThresholdsWaitTime: 10
          IgnoreMetricsTime: 10
      CustomRecipes:
        Setup:
        - thoughtworksdemo::phpsetup
        - thoughtworksdemo::httpdsetup
        - thoughtworksdemo::deployapp
        Deploy:
        - thoughtworksdemo::deployapp
        Shutdown:
        - thoughtworksdemo::httpdstop
      CustomSecurityGroupIds:
      - Fn::GetAtt:
        - webserverSG
        - GroupId
  webInstance1:
    DependsOn: dbInstance
    Type: AWS::OpsWorks::Instance
    Properties:
      StackId:
        Ref: thoughtworksDemoStack
      LayerIds:
      - Ref: webLayer
      InstanceType:
        Ref: WebInstanceType
      AvailabilityZone: us-east-1a
      InstallUpdatesOnBoot: true
      SshKeyName: yogaraj-aws
  webInstance2:
    DependsOn: dbInstance
    Type: AWS::OpsWorks::Instance
    Properties:
      StackId:
        Ref: thoughtworksDemoStack
      LayerIds:
      - Ref: webLayer
      InstanceType:
        Ref: WebInstanceType
      AvailabilityZone: us-east-1b
      InstallUpdatesOnBoot: true
      SshKeyName: yogaraj-aws
  mediawikiApp:
    Type: AWS::OpsWorks::App
    Properties:
      StackId:
        Ref: thoughtworksDemoStack
      Type: other
      Name: mediawiki
      AppSource:
        Type: archive
        Url: https://releases.wikimedia.org/mediawiki/1.35/mediawiki-1.35.2.tar.gz
      Attributes:
        DocumentRoot: web
  elb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones:
      - us-east-1a
      - us-east-1b
      CrossZone: true
      SecurityGroups:
      - Fn::GetAtt:
        - webserverSG
        - GroupId
      LoadBalancerName: thoughtworks-web-elb
      Listeners:
      - InstancePort: '80'
        InstanceProtocol: HTTP
        LoadBalancerPort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/index.php/Main_Page
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '10'
        Timeout: '5'
  dbElb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones:
      - us-east-1a
      - us-east-1b
      CrossZone: true
      LoadBalancerName: thoughtworks-database-elb
      SecurityGroups:
      - Fn::GetAtt:
        - databaseSG
        - GroupId
      Listeners:
      - InstancePort: '3306'
        InstanceProtocol: TCP
        LoadBalancerPort: '3306'
        Protocol: TCP
  elbAttach:
    Type: AWS::OpsWorks::ElasticLoadBalancerAttachment
    Properties:
      ElasticLoadBalancerName:
        Ref: elb
      LayerId:
        Ref: webLayer
  dbElbAttach:
    Type: AWS::OpsWorks::ElasticLoadBalancerAttachment
    Properties:
      ElasticLoadBalancerName:
        Ref: dbElb
      LayerId:
        Ref: databaseLayer
Outputs:
  website:
    Description: mediawiki website
    Value:
      Fn::GetAtt:
      - elb
      - DNSName
